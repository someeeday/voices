"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤
"""

import argparse
import logging
import sys
import hashlib
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ Python path
sys.path.append(str(Path(__file__).parent.parent))

from src.core.simple_system import SimpleSpeakerSystem
from src.utils.logger_config import setup_logger
from src.data.dataset_manager import DatasetManager


def setup_argument_parser():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="üéôÔ∏è –°–∏—Å—Ç–µ–º–∞ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ì–æ–ª–æ—Å–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python src/main.py --train                   # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
  python src/main.py --identify voice.wav      # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument('--train', action='store_true',
                      help='–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö (–æ–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞)')
    parser.add_argument('--identify', type=str, metavar='FILE',
                      help='–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ')
    parser.add_argument('--force-train', action='store_true',
                      help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å')
    # --learn —É–¥–∞–ª—ë–Ω
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument('--verbose', '-v', action='store_true',
                      help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    return parser

def get_users_hash(users_path):
    try:
        with open(users_path, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    except Exception:
        return None

def get_dir_hash(dir_path):
    hash_md5 = hashlib.md5()
    for root, dirs, files in os.walk(dir_path):
        for fname in sorted(files):
            fpath = os.path.join(root, fname)
            try:
                stat = os.stat(fpath)
                hash_md5.update(fname.encode())
                hash_md5.update(str(stat.st_mtime).encode())
            except Exception:
                continue
    return hash_md5.hexdigest()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    parser = setup_argument_parser()
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = logging.DEBUG if args.verbose else logging.INFO
    logger = setup_logger(level=log_level)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        system = SimpleSpeakerSystem()
        
        if args.train or args.force_train:
            logger.info("üéì –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ test_data...")
            test_data_path = Path("test_data")
            users_path = Path("data/user_database/users.json")
            users_hash = get_users_hash(users_path) if users_path.exists() else None
            test_data_hash = get_dir_hash(str(test_data_path)) if test_data_path.exists() else None
            hash_file = Path("data/models/last_train_hash.txt")
            prev_hash = None
            if hash_file.exists():
                with open(hash_file, "r", encoding="utf-8") as f:
                    prev_hash = f.read().strip()
            current_hash = f"{users_hash}_{test_data_hash}"
            if not args.force_train and prev_hash == current_hash:
                logger.info("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ test_data, –æ–±—É—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                acc_file = Path("data/models/last_accuracy.txt")
                if acc_file.exists():
                    with open(acc_file, "r", encoding="utf-8") as f:
                        acc = float(f.read().strip())
                    print(f"\n==============================\n–§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {acc:.2%}\n==============================\n")
                return 0
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º–µ–Ω–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)
            existing_users = set()
            if test_data_path.exists():
                existing_users = set(u['name'].strip().lower() for u in system.user_database.get_all_users_list())
                for user_dir in test_data_path.iterdir():
                    if user_dir.is_dir():
                        user_name = user_dir.name.strip().lower()
                        if user_name in existing_users:
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_dir.name} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
                            continue
                        audio_files = list(user_dir.glob("*.wav"))
                        if audio_files:
                            logger.info(f"üë§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_dir.name} ({len(audio_files)} —Ñ–∞–π–ª–æ–≤)")
                            try:
                                system.register_user(user_dir.name, [str(f) for f in audio_files])
                            except Exception as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_dir.name}: {e}")
            else:
                logger.info("–ü–∞–ø–∫–∞ test_data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
            # –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∏–º –¥–∞—Ç–∞—Å–µ—Ç –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            logger.info("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            dataset_manager = DatasetManager()
            success = dataset_manager.prepare_all_datasets()
            if not success:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                return 1
            logger.info("üéì –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...")
            success = system.train_model()
            if success:
                logger.info("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
                return 1
            # –ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ö—ç—à
            with open(hash_file, "w", encoding="utf-8") as f:
                f.write(current_hash)
        
        elif args.identify:
            audio_path = Path(args.identify)
            if not audio_path.exists():
                logger.error(f"‚ùå –§–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {audio_path}")
                return 1
            if audio_path.is_dir():
                logger.info(f"üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {audio_path}")
                audio_files = list(audio_path.glob("*.wav"))
                if not audio_files:
                    logger.info("–í –ø–∞–ø–∫–µ –Ω–µ—Ç .wav —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
                    return 0
                for file in audio_files:
                    result = system.identify_voice(str(file))
                    if result:
                        confidence = result.get('similarity', result.get('confidence', 0))
                        logger.info(f"  {file.name}: {result['name']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})")
                    else:
                        logger.info(f"  {file.name}: –ì–æ–≤–æ—Ä—è—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            else:
                logger.info(f"üîç –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞ –≤ —Ñ–∞–π–ª–µ: {audio_path}")
                result = system.identify_voice(str(audio_path))
                if result:
                    confidence = result.get('similarity', result.get('confidence', 0))
                    logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['name']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})")
                else:
                    logger.info("‚ùì –ì–æ–≤–æ—Ä—è—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        else:
            parser.print_help()
            return 1
            
    except KeyboardInterrupt:
        logger.info("üõë –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
